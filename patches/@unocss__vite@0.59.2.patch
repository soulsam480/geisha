diff --git a/dist/index.mjs b/dist/index.mjs
index 7b5b7c438633e80a8e151daa0e5789628d4e48da..83857577e338c8c27ae409e301dc816948c4f047 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -1,47 +1,53 @@
-import process$1 from 'node:process';
-import UnocssInspector from '@unocss/inspector';
-import { resolve, isAbsolute, dirname } from 'node:path';
-import fs from 'node:fs/promises';
-import fg from 'fast-glob';
-import MagicString from 'magic-string';
-import remapping from '@ampproject/remapping';
-import { createHash } from 'node:crypto';
-import { cssIdRE, createGenerator, BetterMap, notNull, toEscapedSelector } from '@unocss/core';
-import { Buffer } from 'node:buffer';
-import { createFilter } from '@rollup/pluginutils';
-import fs$1 from 'node:fs';
-import { fileURLToPath } from 'node:url';
-import { loadConfig } from '@unocss/config';
+import process$1 from "node:process";
+import UnocssInspector from "@unocss/inspector";
+import { resolve, isAbsolute, dirname } from "node:path";
+import fs from "node:fs/promises";
+import fg from "fast-glob";
+import MagicString from "magic-string";
+import remapping from "@ampproject/remapping";
+import { createHash } from "node:crypto";
+import {
+  cssIdRE,
+  createGenerator,
+  BetterMap,
+  notNull,
+  toEscapedSelector,
+} from "@unocss/core";
+import { Buffer } from "node:buffer";
+import { createFilter } from "@rollup/pluginutils";
+import fs$1 from "node:fs";
+import { fileURLToPath } from "node:url";
+import { loadConfig } from "@unocss/config";
 
 const defaultPipelineExclude = [cssIdRE];
-const defaultPipelineInclude = [/\.(vue|svelte|[jt]sx|mdx?|astro|elm|php|phtml|html)($|\?)/];
-
-const VIRTUAL_ENTRY_ALIAS = [
-  /^(?:virtual:)?uno(?::(.+))?\.css(\?.*)?$/
+const defaultPipelineInclude = [
+  /\.(vue|svelte|[jt]sx|mdx?|astro|elm|php|phtml|html)($|\?)/,
 ];
+
+const VIRTUAL_ENTRY_ALIAS = [/^(?:virtual:)?uno(?::(.+))?\.css(\?.*)?$/];
 const LAYER_MARK_ALL = "__ALL__";
-const RESOLVED_ID_WITH_QUERY_RE = /[\/\\]__uno(?:(_.*?))?\.css(\?.*)?$/;
-const RESOLVED_ID_RE = /[\/\\]__uno(?:_(.*?))?\.css$/;
+const RESOLVED_ID_WITH_QUERY_RE = /[\/\\]z__uno(?:(_.*?))?\.css(\?.*)?$/;
+const RESOLVED_ID_RE = /[\/\\]z__uno(?:_(.*?))?\.css$/;
 function resolveId(id) {
-  if (id.match(RESOLVED_ID_WITH_QUERY_RE))
-    return id;
+  if (id.match(RESOLVED_ID_WITH_QUERY_RE)) return id;
   for (const alias of VIRTUAL_ENTRY_ALIAS) {
     const match = id.match(alias);
     if (match) {
-      return match[1] ? `/__uno_${match[1]}.css` : "/__uno.css";
+      return match[1] ? `/z__uno_${match[1]}.css` : "/z__uno.css";
     }
   }
 }
 function resolveLayer(id) {
   const match = id.match(RESOLVED_ID_RE);
-  if (match)
-    return match[1] || LAYER_MARK_ALL;
+  if (match) return match[1] || LAYER_MARK_ALL;
 }
-const LAYER_PLACEHOLDER_RE = /#--unocss--\s*{\s*layer\s*:\s*(.+?)\s*(?:;\s*escape-view\s*:\s*(.+?)\s*)?;?\s*}/g;
+const LAYER_PLACEHOLDER_RE =
+  /#--unocss--\s*{\s*layer\s*:\s*(.+?)\s*(?:;\s*escape-view\s*:\s*(.+?)\s*)?;?\s*}/g;
 function getLayerPlaceholder(layer) {
   return `#--unocss--{layer:${layer};escape-view:\\"\\'\\\`\\\\}`;
 }
-const HASH_PLACEHOLDER_RE = /#--unocss-hash--\s*{\s*content\s*:\s*\\*"(.+?)\\*";?\s*}/g;
+const HASH_PLACEHOLDER_RE =
+  /#--unocss-hash--\s*{\s*content\s*:\s*\\*"(.+?)\\*";?\s*}/g;
 function getHashPlaceholder(hash) {
   return `#--unocss-hash--{content:"${hash}"}`;
 }
@@ -51,7 +57,10 @@ const IGNORE_COMMENT = "@unocss-ignore";
 const CSS_PLACEHOLDER = "@unocss-placeholder";
 const SKIP_START_COMMENT = "@unocss-skip-start";
 const SKIP_END_COMMENT = "@unocss-skip-end";
-const SKIP_COMMENT_RE = new RegExp(`(//\\s*?${SKIP_START_COMMENT}\\s*?|\\/\\*\\s*?${SKIP_START_COMMENT}\\s*?\\*\\/|<!--\\s*?${SKIP_START_COMMENT}\\s*?-->)[\\s\\S]*?(//\\s*?${SKIP_END_COMMENT}\\s*?|\\/\\*\\s*?${SKIP_END_COMMENT}\\s*?\\*\\/|<!--\\s*?${SKIP_END_COMMENT}\\s*?-->)`, "g");
+const SKIP_COMMENT_RE = new RegExp(
+  `(//\\s*?${SKIP_START_COMMENT}\\s*?|\\/\\*\\s*?${SKIP_START_COMMENT}\\s*?\\*\\/|<!--\\s*?${SKIP_START_COMMENT}\\s*?-->)[\\s\\S]*?(//\\s*?${SKIP_END_COMMENT}\\s*?|\\/\\*\\s*?${SKIP_END_COMMENT}\\s*?\\*\\/|<!--\\s*?${SKIP_END_COMMENT}\\s*?-->)`,
+  "g",
+);
 
 function deprecationCheck(config) {
   let warned = false;
@@ -60,9 +69,13 @@ function deprecationCheck(config) {
     console.warn(`[unocss] ${msg}`);
   }
   if (config.include)
-    warn("`include` option is deprecated, use `content.pipeline.include` instead.");
+    warn(
+      "`include` option is deprecated, use `content.pipeline.include` instead.",
+    );
   if (config.exclude)
-    warn("`exclude` option is deprecated, use `content.pipeline.exclude` instead.");
+    warn(
+      "`exclude` option is deprecated, use `content.pipeline.exclude` instead.",
+    );
   if (config.extraContent)
     warn("`extraContent` option is deprecated, use `content` instead.");
   if (config.content?.plain)
@@ -71,8 +84,12 @@ function deprecationCheck(config) {
     throw new Error("deprecation warning");
 }
 
-function createContext(configOrPath, defaults = {}, extraConfigSources = [], resolveConfigResult = () => {
-}) {
+function createContext(
+  configOrPath,
+  defaults = {},
+  extraConfigSources = [],
+  resolveConfigResult = () => {},
+) {
   let root = process$1.cwd();
   let rawConfig = {};
   let configFileList = [];
@@ -80,7 +97,7 @@ function createContext(configOrPath, defaults = {}, extraConfigSources = [], res
   let rollupFilter = createFilter(
     defaultPipelineInclude,
     defaultPipelineExclude,
-    { resolve: typeof configOrPath === "string" ? configOrPath : root }
+    { resolve: typeof configOrPath === "string" ? configOrPath : root },
   );
   const invalidations = [];
   const reloadListeners = [];
@@ -90,30 +107,46 @@ function createContext(configOrPath, defaults = {}, extraConfigSources = [], res
   const affectedModules = /* @__PURE__ */ new Set();
   let ready = reloadConfig();
   async function reloadConfig() {
-    const result = await loadConfig(root, configOrPath, extraConfigSources, defaults);
+    const result = await loadConfig(
+      root,
+      configOrPath,
+      extraConfigSources,
+      defaults,
+    );
     resolveConfigResult(result);
     deprecationCheck(result.config);
     rawConfig = result.config;
     configFileList = result.sources;
     uno.setConfig(rawConfig);
     uno.config.envMode = "dev";
-    rollupFilter = rawConfig.content?.pipeline === false ? () => false : createFilter(
-      rawConfig.content?.pipeline?.include || rawConfig.include || defaultPipelineInclude,
-      rawConfig.content?.pipeline?.exclude || rawConfig.exclude || defaultPipelineExclude,
-      { resolve: typeof configOrPath === "string" ? configOrPath : root }
-    );
+    rollupFilter =
+      rawConfig.content?.pipeline === false
+        ? () => false
+        : createFilter(
+            rawConfig.content?.pipeline?.include ||
+              rawConfig.include ||
+              defaultPipelineInclude,
+            rawConfig.content?.pipeline?.exclude ||
+              rawConfig.exclude ||
+              defaultPipelineExclude,
+            { resolve: typeof configOrPath === "string" ? configOrPath : root },
+          );
     tokens.clear();
-    await Promise.all(modules.map((code, id) => uno.applyExtractors(code.replace(SKIP_COMMENT_RE, ""), id, tokens)));
+    await Promise.all(
+      modules.map((code, id) =>
+        uno.applyExtractors(code.replace(SKIP_COMMENT_RE, ""), id, tokens),
+      ),
+    );
     invalidate();
     dispatchReload();
     const presets = /* @__PURE__ */ new Set();
     uno.config.presets.forEach((i) => {
-      if (!i.name)
-        return;
+      if (!i.name) return;
       if (presets.has(i.name))
-        console.warn(`[unocss] duplication of preset ${i.name} found, there might be something wrong with your config.`);
-      else
-        presets.add(i.name);
+        console.warn(
+          `[unocss] duplication of preset ${i.name} found, there might be something wrong with your config.`,
+        );
+      else presets.add(i.name);
     });
     return result;
   }
@@ -131,17 +164,18 @@ function createContext(configOrPath, defaults = {}, extraConfigSources = [], res
     reloadListeners.forEach((cb) => cb());
   }
   async function extract(code, id) {
-    if (id)
-      modules.set(id, code);
+    if (id) modules.set(id, code);
     const len = tokens.size;
     await uno.applyExtractors(code.replace(SKIP_COMMENT_RE, ""), id, tokens);
-    if (tokens.size > len)
-      invalidate();
+    if (tokens.size > len) invalidate();
   }
   function filter(code, id) {
-    if (code.includes(IGNORE_COMMENT))
-      return false;
-    return code.includes(INCLUDE_COMMENT) || code.includes(CSS_PLACEHOLDER) || rollupFilter(id.replace(/\?v=\w+$/, ""));
+    if (code.includes(IGNORE_COMMENT)) return false;
+    return (
+      code.includes(INCLUDE_COMMENT) ||
+      code.includes(CSS_PLACEHOLDER) ||
+      rollupFilter(id.replace(/\?v=\w+$/, ""))
+    );
   }
   async function getConfig() {
     await ready;
@@ -177,7 +211,7 @@ function createContext(configOrPath, defaults = {}, extraConfigSources = [], res
       return root;
     },
     updateRoot,
-    getConfigFileList: () => configFileList
+    getConfigFileList: () => configFileList,
   };
 }
 
@@ -194,7 +228,8 @@ function hash(str) {
   let hval = 2166136261;
   for (i = 0, l = str.length; i < l; i++) {
     hval ^= str.charCodeAt(i);
-    hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);
+    hval +=
+      (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);
   }
   return `00000${(hval >>> 0).toString(36)}`.slice(-6);
 }
@@ -214,7 +249,7 @@ function replaceAsync(string, searchValue, replacer) {
       });
     } else {
       return Promise.resolve(
-        String.prototype.replace.call(string, searchValue, replacer)
+        String.prototype.replace.call(string, searchValue, replacer),
       );
     }
   } catch (error) {
@@ -233,17 +268,19 @@ function ChunkModeBuildPlugin({ uno, filter }) {
       cssPlugin = config.plugins.find((i) => i.name === "vite:css-post");
     },
     transform(code, id) {
-      if (!filter(code, id))
-        return;
+      if (!filter(code, id)) return;
       files[id] = code;
       return null;
     },
     async renderChunk(_, chunk) {
-      const chunks = Object.keys(chunk.modules).map((i) => files[i]).filter(Boolean);
-      if (!chunks.length)
-        return null;
+      const chunks = Object.keys(chunk.modules)
+        .map((i) => files[i])
+        .filter(Boolean);
+      if (!chunks.length) return null;
       const tokens = /* @__PURE__ */ new Set();
-      await Promise.all(chunks.map((c) => uno.applyExtractors(c, void 0, tokens)));
+      await Promise.all(
+        chunks.map((c) => uno.applyExtractors(c, void 0, tokens)),
+      );
       const { css } = await uno.generate(tokens);
       const fakeCssId = `${chunk.fileName}.css`;
       await cssPlugin.transform(css, fakeCssId);
@@ -252,32 +289,30 @@ function ChunkModeBuildPlugin({ uno, filter }) {
         originalLength: 0,
         removedExports: [],
         renderedExports: [],
-        renderedLength: 0
+        renderedLength: 0,
       };
       return null;
     },
     async transformIndexHtml(code) {
       const { css } = await uno.generate(code);
-      if (css)
-        return `${code}<style>${css}</style>`;
-    }
+      if (css) return `${code}<style>${css}</style>`;
+    },
   };
 }
 
 async function applyTransformers(ctx, original, id, enforce = "default") {
-  if (original.includes(IGNORE_COMMENT))
-    return;
-  const transformers = (ctx.uno.config.transformers || []).filter((i) => (i.enforce || "default") === enforce);
-  if (!transformers.length)
-    return;
+  if (original.includes(IGNORE_COMMENT)) return;
+  const transformers = (ctx.uno.config.transformers || []).filter(
+    (i) => (i.enforce || "default") === enforce,
+  );
+  if (!transformers.length) return;
   const skipMap = /* @__PURE__ */ new Map();
   let code = original;
   let s = new MagicString(transformSkipCode(code, skipMap));
   const maps = [];
   for (const t of transformers) {
     if (t.idFilter) {
-      if (!t.idFilter(id))
-        continue;
+      if (!t.idFilter(id)) continue;
     } else if (!ctx.filter(code, id)) {
       continue;
     }
@@ -295,7 +330,7 @@ async function applyTransformers(ctx, original, id, enforce = "default") {
       map: remapping(maps, (_, ctx2) => {
         ctx2.content = code;
         return null;
-      })
+      }),
     };
   }
 }
@@ -322,12 +357,10 @@ async function setupContentExtractor(ctx, shouldWatch = false) {
   if (content?.inline) {
     await Promise.all(
       content.inline.map(async (c, idx) => {
-        if (typeof c === "function")
-          c = await c();
-        if (typeof c === "string")
-          c = { code: c };
+        if (typeof c === "function") c = await c();
+        if (typeof c === "string") c = { code: c };
         return extract(c.code, c.id ?? `__plain_content_${idx}__`);
-      })
+      }),
     );
   }
   if (content?.filesystem) {
@@ -335,21 +368,29 @@ async function setupContentExtractor(ctx, shouldWatch = false) {
     async function extractFile(file) {
       file = isAbsolute(file) ? file : resolve(root, file);
       const code = await fs.readFile(file, "utf-8");
-      if (!filter(code, file))
-        return;
+      if (!filter(code, file)) return;
       const preTransform = await applyTransformers(ctx, code, file, "pre");
-      const defaultTransform = await applyTransformers(ctx, preTransform?.code || code, file);
-      await applyTransformers(ctx, defaultTransform?.code || preTransform?.code || code, file, "post");
+      const defaultTransform = await applyTransformers(
+        ctx,
+        preTransform?.code || code,
+        file,
+      );
+      await applyTransformers(
+        ctx,
+        defaultTransform?.code || preTransform?.code || code,
+        file,
+        "post",
+      );
       return await extract(preTransform?.code || code, file);
     }
     if (shouldWatch) {
-      const { watch } = await import('chokidar');
+      const { watch } = await import("chokidar");
       const ignored = ["**/{.git,node_modules}/**"];
       const watcher = watch(files, {
         ignorePermissionErrors: true,
         ignored,
         cwd: root,
-        ignoreInitial: true
+        ignoreInitial: true,
       });
       watcher.on("all", (type, file) => {
         if (type === "add" || type === "change") {
@@ -366,25 +407,20 @@ function isLegacyChunk(chunk, options) {
   return options.format === "system" && chunk.fileName.includes("-legacy");
 }
 function GlobalModeBuildPlugin(ctx) {
-  const { uno, ready, extract, tokens, filter, getConfig, tasks, flushTasks } = ctx;
+  const { uno, ready, extract, tokens, filter, getConfig, tasks, flushTasks } =
+    ctx;
   const vfsLayers = /* @__PURE__ */ new Set();
   const layerImporterMap = /* @__PURE__ */ new Map();
   let viteConfig;
   const cssPostPlugins = /* @__PURE__ */ new Map();
   const cssPlugins = /* @__PURE__ */ new Map();
   async function applyCssTransform(css, id, dir, ctx2) {
-    const {
-      postcss = true
-    } = await getConfig();
-    if (!cssPlugins.get(dir) || !postcss)
-      return css;
+    const { postcss = true } = await getConfig();
+    if (!cssPlugins.get(dir) || !postcss) return css;
     const result = await cssPlugins.get(dir).transform.call(ctx2, css, id);
-    if (!result)
-      return css;
-    if (typeof result === "string")
-      css = result;
-    else if (result.code)
-      css = result.code;
+    if (!result) return css;
+    if (typeof result === "string") css = result;
+    else if (result.code) css = result.code;
     css = css.replace(/[\n\r]/g, "");
     return css;
   }
@@ -392,8 +428,7 @@ function GlobalModeBuildPlugin(ctx) {
   let lastResult;
   async function generateAll() {
     await flushTasks();
-    if (lastResult && lastTokenSize === tokens.size)
-      return lastResult;
+    if (lastResult && lastTokenSize === tokens.size) return lastResult;
     lastResult = await uno.generate(tokens, { minify: true });
     lastTokenSize = tokens.size;
     return lastResult;
@@ -411,8 +446,7 @@ function GlobalModeBuildPlugin(ctx) {
         lastResult = void 0;
       },
       transform(code, id) {
-        if (filter(code, id))
-          tasks.push(extract(code, id));
+        if (filter(code, id)) tasks.push(extract(code, id));
         return null;
       },
       transformIndexHtml: {
@@ -424,7 +458,7 @@ function GlobalModeBuildPlugin(ctx) {
         enforce: "pre",
         transform(code, { filename }) {
           tasks.push(extract(code, filename));
-        }
+        },
       },
       resolveId(id, importer) {
         const entry = resolveId(id);
@@ -432,8 +466,7 @@ function GlobalModeBuildPlugin(ctx) {
           const layer = resolveLayer(entry);
           if (layer) {
             vfsLayers.add(layer);
-            if (importer)
-              layerImporterMap.set(importer, entry);
+            if (importer) layerImporterMap.set(importer, entry);
           }
           return entry;
         }
@@ -446,8 +479,7 @@ function GlobalModeBuildPlugin(ctx) {
         }
       },
       moduleParsed({ id, importedIds }) {
-        if (!layerImporterMap.has(id))
-          return;
+        if (!layerImporterMap.has(id)) return;
         const layerKey = layerImporterMap.get(id);
         if (!importedIds.includes(layerKey)) {
           layerImporterMap.delete(id);
@@ -455,19 +487,22 @@ function GlobalModeBuildPlugin(ctx) {
         }
       },
       async configResolved(config) {
-        const distDirs = [
-          resolve(config.root, config.build.outDir)
-        ];
+        const distDirs = [resolve(config.root, config.build.outDir)];
         if (config.build.rollupOptions.output) {
           const outputOptions = config.build.rollupOptions.output;
-          const outputDirs = Array.isArray(outputOptions) ? outputOptions.map((option) => option.dir).filter(Boolean) : outputOptions.dir ? [outputOptions.dir] : [];
+          const outputDirs = Array.isArray(outputOptions)
+            ? outputOptions.map((option) => option.dir).filter(Boolean)
+            : outputOptions.dir
+            ? [outputOptions.dir]
+            : [];
           outputDirs.forEach((dir) => {
             distDirs.push(dir);
-            if (!isAbsolute(dir))
-              distDirs.push(resolve(config.root, dir));
+            if (!isAbsolute(dir)) distDirs.push(resolve(config.root, dir));
           });
         }
-        const cssPostPlugin = config.plugins.find((i) => i.name === "vite:css-post");
+        const cssPostPlugin = config.plugins.find(
+          (i) => i.name === "vite:css-post",
+        );
         const cssPlugin = config.plugins.find((i) => i.name === "vite:css");
         if (cssPostPlugin)
           distDirs.forEach((dir) => cssPostPlugins.set(dir, cssPostPlugin));
@@ -478,30 +513,34 @@ function GlobalModeBuildPlugin(ctx) {
       // we inject a hash to chunk before the dist hash calculation to make sure
       // the hash is different when unocss changes
       async renderChunk(_, chunk, options) {
-        if (isLegacyChunk(chunk, options))
-          return null;
+        if (isLegacyChunk(chunk, options)) return null;
         if (!Object.keys(chunk.modules).some((i) => RESOLVED_ID_RE.test(i)))
           return null;
         const cssPost = cssPostPlugins.get(options.dir);
         if (!cssPost) {
-          this.warn("[unocss] failed to find vite:css-post plugin. It might be an internal bug of UnoCSS");
+          this.warn(
+            "[unocss] failed to find vite:css-post plugin. It might be an internal bug of UnoCSS",
+          );
           return null;
         }
         let { css } = await generateAll();
         const fakeCssId = `${viteConfig.root}/${chunk.fileName}-unocss-hash.css`;
         css = await applyCssTransform(css, fakeCssId, options.dir, this);
         const hash = getHash(css);
-        const transformHandler = "handler" in cssPost.transform ? cssPost.transform.handler : cssPost.transform;
+        const transformHandler =
+          "handler" in cssPost.transform
+            ? cssPost.transform.handler
+            : cssPost.transform;
         await transformHandler.call({}, getHashPlaceholder(hash), fakeCssId);
         chunk.modules[fakeCssId] = {
           code: null,
           originalLength: 0,
           removedExports: [],
           renderedExports: [],
-          renderedLength: 0
+          renderedLength: 0,
         };
         return null;
-      }
+      },
     },
     {
       name: "unocss:global:content",
@@ -511,29 +550,49 @@ function GlobalModeBuildPlugin(ctx) {
       },
       buildStart() {
         tasks.push(setupContentExtractor(ctx, viteConfig.command === "serve"));
-      }
+      },
     },
     {
       name: "unocss:global:build:generate",
       apply: "build",
       async renderChunk(code, chunk, options) {
-        if (isLegacyChunk(chunk, options))
-          return null;
+        if (isLegacyChunk(chunk, options)) return null;
         if (!Object.keys(chunk.modules).some((i) => RESOLVED_ID_RE.test(i)))
           return null;
         const cssPost = cssPostPlugins.get(options.dir);
         if (!cssPost) {
-          this.warn("[unocss] failed to find vite:css-post plugin. It might be an internal bug of UnoCSS");
+          this.warn(
+            "[unocss] failed to find vite:css-post plugin. It might be an internal bug of UnoCSS",
+          );
           return null;
         }
         const result = await generateAll();
-        const mappedVfsLayer = Array.from(vfsLayers).map((layer) => layer === LAYER_MARK_ALL ? layer : layer.replace(/^_/, ""));
-        const cssWithLayers = Array.from(vfsLayers).map((layer) => `#--unocss-layer-start--${layer}--{start:${layer}} ${layer === LAYER_MARK_ALL ? result.getLayers(void 0, mappedVfsLayer) : result.getLayer(layer.replace(/^_/, "")) || ""} #--unocss-layer-end--${layer}--{end:${layer}}`).join("");
+        const mappedVfsLayer = Array.from(vfsLayers).map((layer) =>
+          layer === LAYER_MARK_ALL ? layer : layer.replace(/^_/, ""),
+        );
+        const cssWithLayers = Array.from(vfsLayers)
+          .map(
+            (layer) =>
+              `#--unocss-layer-start--${layer}--{start:${layer}} ${
+                layer === LAYER_MARK_ALL
+                  ? result.getLayers(void 0, mappedVfsLayer)
+                  : result.getLayer(layer.replace(/^_/, "")) || ""
+              } #--unocss-layer-end--${layer}--{end:${layer}}`,
+          )
+          .join("");
         const fakeCssId = `${viteConfig.root}/${chunk.fileName}-unocss-hash.css`;
-        const css = await applyCssTransform(cssWithLayers, fakeCssId, options.dir, this);
-        const transformHandler = "handler" in cssPost.transform ? cssPost.transform.handler : cssPost.transform;
+        const css = await applyCssTransform(
+          cssWithLayers,
+          fakeCssId,
+          options.dir,
+          this,
+        );
+        const transformHandler =
+          "handler" in cssPost.transform
+            ? cssPost.transform.handler
+            : cssPost.transform;
         await transformHandler.call({}, css, fakeCssId);
-      }
+      },
     },
     {
       name: "unocss:global:build:bundle",
@@ -542,65 +601,86 @@ function GlobalModeBuildPlugin(ctx) {
       // rewrite the css placeholders
       async generateBundle(options, bundle) {
         const checkJs = ["umd", "amd", "iife"].includes(options.format);
-        const files = Object.keys(bundle).filter((i) => i.endsWith(".css") || checkJs && i.endsWith(".js"));
-        if (!files.length)
-          return;
+        const files = Object.keys(bundle).filter(
+          (i) => i.endsWith(".css") || (checkJs && i.endsWith(".js")),
+        );
+        if (!files.length) return;
         if (!vfsLayers.size) {
-          if (replaced)
-            return;
-          const msg = "[unocss] Entry module not found. Did you add `import 'uno.css'` in your main entry?";
+          if (replaced) return;
+          const msg =
+            "[unocss] Entry module not found. Did you add `import 'uno.css'` in your main entry?";
           this.warn(msg);
           return;
         }
         const getLayer = (layer, input, replace = false) => {
-          const re = new RegExp(`#--unocss-layer-start--${layer}--\\{start:${layer}\\}([\\s\\S]*?)#--unocss-layer-end--${layer}--\\{end:${layer}\\}`, "g");
-          if (replace)
-            return input.replace(re, "");
+          const re = new RegExp(
+            `#--unocss-layer-start--${layer}--\\{start:${layer}\\}([\\s\\S]*?)#--unocss-layer-end--${layer}--\\{end:${layer}\\}`,
+            "g",
+          );
+          if (replace) return input.replace(re, "");
           const match = re.exec(input);
-          if (match)
-            return match[1];
+          if (match) return match[1];
           return "";
         };
         for (const file of files) {
           const chunk = bundle[file];
           if (chunk.type === "asset" && typeof chunk.source === "string") {
             const css = chunk.source.replace(HASH_PLACEHOLDER_RE, "");
-            chunk.source = await replaceAsync(css, LAYER_PLACEHOLDER_RE, async (_, layer) => {
-              replaced = true;
-              return getLayer(layer, css);
-            });
+            chunk.source = await replaceAsync(
+              css,
+              LAYER_PLACEHOLDER_RE,
+              async (_, layer) => {
+                replaced = true;
+                return getLayer(layer, css);
+              },
+            );
             Array.from(vfsLayers).forEach((layer) => {
               chunk.source = getLayer(layer, chunk.source, true);
             });
           } else if (chunk.type === "chunk" && typeof chunk.code === "string") {
             const js = chunk.code.replace(HASH_PLACEHOLDER_RE, "");
-            chunk.code = await replaceAsync(js, LAYER_PLACEHOLDER_RE, async (_, layer) => {
-              replaced = true;
-              const css = getLayer(layer, js);
-              return css.replace(/\n/g, "").replace(/(?<!\\)(['"])/g, "\\$1");
-            });
+            chunk.code = await replaceAsync(
+              js,
+              LAYER_PLACEHOLDER_RE,
+              async (_, layer) => {
+                replaced = true;
+                const css = getLayer(layer, js);
+                return css.replace(/\n/g, "").replace(/(?<!\\)(['"])/g, "\\$1");
+              },
+            );
             Array.from(vfsLayers).forEach((layer) => {
               chunk.code = getLayer(layer, chunk.code, true);
             });
           }
         }
         if (!replaced) {
-          let msg = "[unocss] does not found CSS placeholder in the generated chunks";
+          let msg =
+            "[unocss] does not found CSS placeholder in the generated chunks";
           if (viteConfig.build.lib && checkJs)
-            msg += "\nIt seems you are building in library mode, it's recommended to set `build.cssCodeSplit` to true.\nSee https://github.com/vitejs/vite/issues/1579";
-          else
-            msg += "\nThis is likely an internal bug of unocss vite plugin";
+            msg +=
+              "\nIt seems you are building in library mode, it's recommended to set `build.cssCodeSplit` to true.\nSee https://github.com/vitejs/vite/issues/1579";
+          else msg += "\nThis is likely an internal bug of unocss vite plugin";
           this.error(msg);
         }
-      }
-    }
+      },
+    },
   ];
 }
 
 const WARN_TIMEOUT = 2e4;
 const WS_EVENT_PREFIX = "unocss:hmr";
 const HASH_LENGTH = 6;
-function GlobalModeDevPlugin({ uno, tokens, tasks, flushTasks, affectedModules, onInvalidate, extract, filter, getConfig }) {
+function GlobalModeDevPlugin({
+  uno,
+  tokens,
+  tasks,
+  flushTasks,
+  affectedModules,
+  onInvalidate,
+  extract,
+  filter,
+  getConfig,
+}) {
   const servers = [];
   const entries = /* @__PURE__ */ new Set();
   let invalidateTimer;
@@ -614,11 +694,18 @@ function GlobalModeDevPlugin({ uno, tokens, tasks, flushTasks, affectedModules,
     let tokensSize = tokens.size;
     do {
       result = await uno.generate(tokens);
-      if (tokensSize === tokens.size)
-        break;
+      if (tokensSize === tokens.size) break;
       tokensSize = tokens.size;
     } while (true);
-    const css = layer === LAYER_MARK_ALL ? result.getLayers(void 0, Array.from(entries).map((i) => resolveLayer(i)).filter((i) => !!i)) : result.getLayer(layer);
+    const css =
+      layer === LAYER_MARK_ALL
+        ? result.getLayers(
+            void 0,
+            Array.from(entries)
+              .map((i) => resolveLayer(i))
+              .filter((i) => !!i),
+          )
+        : result.getLayer(layer);
     const hash = getHash(css || "", HASH_LENGTH);
     lastServedHash.set(layer, hash);
     lastServedTime = Date.now();
@@ -628,8 +715,7 @@ function GlobalModeDevPlugin({ uno, tokens, tasks, flushTasks, affectedModules,
     for (const server of servers) {
       for (const id of ids) {
         const mod = server.moduleGraph.getModuleById(id);
-        if (!mod)
-          continue;
+        if (!mod) continue;
         server.moduleGraph.invalidateModule(mod);
       }
     }
@@ -643,32 +729,35 @@ function GlobalModeDevPlugin({ uno, tokens, tasks, flushTasks, affectedModules,
     for (const server of servers) {
       server.ws.send({
         type: "update",
-        updates: Array.from(ids).map((id) => {
-          const mod = server.moduleGraph.getModuleById(id);
-          if (!mod)
-            return null;
-          return {
-            acceptedPath: mod.url,
-            path: mod.url,
-            timestamp: lastServedTime,
-            type: "js-update"
-          };
-        }).filter(notNull)
+        updates: Array.from(ids)
+          .map((id) => {
+            const mod = server.moduleGraph.getModuleById(id);
+            if (!mod) return null;
+            return {
+              acceptedPath: mod.url,
+              path: mod.url,
+              timestamp: lastServedTime,
+              type: "js-update",
+            };
+          })
+          .filter(notNull),
       });
     }
   }
   function setWarnTimer() {
     if (!resolved && !resolvedWarnTimer) {
       resolvedWarnTimer = setTimeout(() => {
-        if (process$1.env.TEST || process$1.env.NODE_ENV === "test")
-          return;
+        if (process$1.env.TEST || process$1.env.NODE_ENV === "test") return;
         if (!resolved) {
-          const msg = "[unocss] Entry module not found. Did you add `import 'uno.css'` in your main entry?";
+          const msg =
+            "[unocss] Entry module not found. Did you add `import 'uno.css'` in your main entry?";
           console.warn(msg);
-          servers.forEach(({ ws }) => ws.send({
-            type: "error",
-            err: { message: msg, stack: "" }
-          }));
+          servers.forEach(({ ws }) =>
+            ws.send({
+              type: "error",
+              err: { message: msg, stack: "" },
+            }),
+          );
         }
       }, WARN_TIMEOUT);
     }
@@ -692,16 +781,14 @@ function GlobalModeDevPlugin({ uno, tokens, tasks, flushTasks, affectedModules,
         _server.ws.on(WS_EVENT_PREFIX, async ([layer]) => {
           const preHash = lastServedHash.get(layer);
           await generateCSS(layer);
-          if (lastServedHash.get(layer) !== preHash)
-            sendUpdate(entries);
+          if (lastServedHash.get(layer) !== preHash) sendUpdate(entries);
         });
       },
       buildStart() {
         uno.generate([], { preflights: true });
       },
       transform(code, id) {
-        if (filter(code, id))
-          tasks.push(extract(code, id));
+        if (filter(code, id)) tasks.push(extract(code, id));
         return null;
       },
       transformIndexHtml: {
@@ -715,7 +802,7 @@ function GlobalModeDevPlugin({ uno, tokens, tasks, flushTasks, affectedModules,
         transform(code, { filename }) {
           setWarnTimer();
           tasks.push(extract(code, filename));
-        }
+        },
       },
       resolveId(id) {
         const entry = resolveId(id);
@@ -728,18 +815,17 @@ function GlobalModeDevPlugin({ uno, tokens, tasks, flushTasks, affectedModules,
       },
       async load(id) {
         const layer = resolveLayer(getPath(id));
-        if (!layer)
-          return null;
+        if (!layer) return null;
         const { hash, css } = await generateCSS(layer);
         return {
           // add hash to the chunk of CSS that it will send back to client to check if there is new CSS generated
           code: `__uno_hash_${hash}{--:'';}${css}`,
-          map: { mappings: "" }
+          map: { mappings: "" },
         };
       },
       closeBundle() {
         clearWarnTimer();
-      }
+      },
     },
     {
       name: "unocss:global:post",
@@ -768,24 +854,23 @@ if (!import.meta.url.includes('?'))
             hmr = `;(async function() {${hmr}
 })()`;
           hmr = `
-if (import.meta.hot) {${hmr}}`;
+if (import.meta.hot) {${hmr}}
+export default __vite__css
+`;
           const s = new MagicString(code);
           s.append(hmr);
           return {
             code: s.toString(),
-            map: s.generateMap()
+            map: s.generateMap(),
           };
         }
-      }
-    }
+      },
+    },
   ];
 }
 
 function GlobalModePlugin(ctx) {
-  return [
-    ...GlobalModeBuildPlugin(ctx),
-    ...GlobalModeDevPlugin(ctx)
-  ];
+  return [...GlobalModeBuildPlugin(ctx), ...GlobalModeDevPlugin(ctx)];
 }
 
 const VIRTUAL_PREFIX = "/@unocss/";
@@ -794,21 +879,21 @@ function PerModuleModePlugin({ uno, filter }) {
   const moduleMap = /* @__PURE__ */ new Map();
   let server;
   const invalidate = (hash) => {
-    if (!server)
-      return;
+    if (!server) return;
     const id = `${VIRTUAL_PREFIX}${hash}.css`;
     const mod = server.moduleGraph.getModuleById(id);
-    if (!mod)
-      return;
+    if (!mod) return;
     server.moduleGraph.invalidateModule(mod);
     server.ws.send({
       type: "update",
-      updates: [{
-        acceptedPath: id,
-        path: id,
-        timestamp: +Date.now(),
-        type: "js-update"
-      }]
+      updates: [
+        {
+          acceptedPath: id,
+          path: id,
+          timestamp: +Date.now(),
+          type: "js-update",
+        },
+      ],
     });
   };
   return [
@@ -817,35 +902,39 @@ function PerModuleModePlugin({ uno, filter }) {
       enforce: "pre",
       resolveId(id) {
         const entry = resolveId(id);
-        if (entry)
-          return entry;
+        if (entry) return entry;
       },
       async load(id) {
         const layer = resolveLayer(getPath(id));
-        if (!layer)
-          return null;
+        if (!layer) return null;
         const { css } = await uno.generate("", { preflights: true });
-        if (!css)
-          return null;
+        if (!css) return null;
         return {
           code: css,
-          map: null
+          map: null,
         };
       },
       async transform(code, id) {
-        if (!filter(code, id))
-          return;
+        if (!filter(code, id)) return;
         const hash = getHash(id);
         const hasScope = SCOPE_IMPORT_RE.test(code);
-        const { css } = await uno.generate(code, { id, scope: hasScope ? `.${hash}` : void 0, preflights: false });
-        if (!css && !hasScope)
-          return null;
+        const { css } = await uno.generate(code, {
+          id,
+          scope: hasScope ? `.${hash}` : void 0,
+          preflights: false,
+        });
+        if (!css && !hasScope) return null;
         if (hasScope)
-          code = code.replace(SCOPE_IMPORT_RE, ` from 'data:text/javascript;base64,${Buffer.from(`export default () => "${hash}"`).toString("base64")}'`);
+          code = code.replace(
+            SCOPE_IMPORT_RE,
+            ` from 'data:text/javascript;base64,${Buffer.from(
+              `export default () => "${hash}"`,
+            ).toString("base64")}'`,
+          );
         moduleMap.set(hash, [id, css]);
         invalidate(hash);
         return null;
-      }
+      },
     },
     {
       name: "unocss:module-scope",
@@ -854,15 +943,14 @@ function PerModuleModePlugin({ uno, filter }) {
         server = _server;
       },
       async transform(code, id) {
-        if (!filter(code, id))
-          return;
+        if (!filter(code, id)) return;
         const hash = getHash(id);
         invalidate(hash);
         const module = moduleMap.get(hash) || [];
         if (module.length) {
           return {
             code: `import "${VIRTUAL_PREFIX}${hash}.css";${code}`,
-            map: null
+            map: null,
           };
         }
       },
@@ -870,17 +958,15 @@ function PerModuleModePlugin({ uno, filter }) {
         return id.startsWith(VIRTUAL_PREFIX) ? id : null;
       },
       load(id) {
-        if (!id.startsWith(VIRTUAL_PREFIX))
-          return null;
+        if (!id.startsWith(VIRTUAL_PREFIX)) return null;
         const hash = id.slice(VIRTUAL_PREFIX.length, -".css".length);
         const [source, css] = moduleMap.get(hash) || [];
-        if (source)
-          this.addWatchFile(source);
+        if (source) this.addWatchFile(source);
         return `
 /* unocss ${source} */
 ${css}`;
-      }
-    }
+      },
+    },
   ];
 }
 
@@ -888,8 +974,7 @@ function VueScopedPlugin({ uno, ready }) {
   let filter = createFilter([/\.vue$/], defaultPipelineExclude);
   async function transformSFC(code) {
     const { css } = await uno.generate(code);
-    if (!css)
-      return null;
+    if (!css) return null;
     return `${code}
 <style scoped>${css}</style>`;
   }
@@ -898,14 +983,18 @@ function VueScopedPlugin({ uno, ready }) {
     enforce: "pre",
     async configResolved() {
       const { config } = await ready;
-      filter = config.content?.pipeline === false ? () => false : createFilter(
-        config.content?.pipeline?.include ?? config.include ?? [/\.vue$/],
-        config.content?.pipeline?.exclude ?? config.exclude ?? defaultPipelineExclude
-      );
+      filter =
+        config.content?.pipeline === false
+          ? () => false
+          : createFilter(
+              config.content?.pipeline?.include ?? config.include ?? [/\.vue$/],
+              config.content?.pipeline?.exclude ??
+                config.exclude ??
+                defaultPipelineExclude,
+            );
     },
     transform(code, id) {
-      if (!filter(id) || !id.endsWith(".vue"))
-        return;
+      if (!filter(id) || !id.endsWith(".vue")) return;
       return transformSFC(code);
     },
     handleHotUpdate(ctx) {
@@ -913,31 +1002,31 @@ function VueScopedPlugin({ uno, ready }) {
       if (filter(ctx.file)) {
         ctx.read = async () => {
           const code = await read();
-          return await transformSFC(code) || code;
+          return (await transformSFC(code)) || code;
         };
       }
-    }
+    },
   };
 }
 
 function ShadowDomModuleModePlugin({ uno }) {
   const partExtractorRegex = /^part-\[(.+)]:/;
   const nameRegexp = /<([^\s^!>]+)\s*([^>]*)>/;
-  const vueSFCStyleRE = new RegExp(`<style.*>[\\s\\S]*${CSS_PLACEHOLDER}[\\s\\S]*<\\/style>`);
+  const vueSFCStyleRE = new RegExp(
+    `<style.*>[\\s\\S]*${CSS_PLACEHOLDER}[\\s\\S]*<\\/style>`,
+  );
   const checkElement = (useParts, idxResolver, element) => {
-    if (!element)
-      return null;
+    if (!element) return null;
     const applyParts = useParts.filter((p) => element[2].includes(p.rule));
-    if (applyParts.length === 0)
-      return null;
+    if (applyParts.length === 0) return null;
     const name = element[1];
     const idx = idxResolver(name);
     return {
       name,
       entries: applyParts.map(({ rule, part }) => [
         `.${rule.replace(/[:[\]]/g, "\\$&")}::part(${part})`,
-        `${name}:nth-of-type(${idx})::part(${part})`
-      ])
+        `${name}:nth-of-type(${idx})::part(${part})`,
+      ]),
     };
   };
   const idxMapFactory = () => {
@@ -953,21 +1042,19 @@ function ShadowDomModuleModePlugin({ uno }) {
       },
       incrementIdx: (name) => {
         elementIdxMap.set(name, elementIdxMap.get(name) + 1);
-      }
+      },
     };
   };
   const transformWebComponent = async (code, id) => {
-    if (!code.match(CSS_PLACEHOLDER))
-      return code;
+    if (!code.match(CSS_PLACEHOLDER)) return code;
     let { css, matched } = await uno.generate(code, {
       preflights: true,
-      safelist: true
+      safelist: true,
     });
     if (css && matched) {
       const useParts = Array.from(matched).reduce((acc, rule) => {
         const matcher = rule.match(partExtractorRegex);
-        if (matcher)
-          acc.push({ part: matcher[1], rule });
+        if (matcher) acc.push({ part: matcher[1], rule });
         return acc;
       }, new Array());
       if (useParts.length > 0) {
@@ -975,12 +1062,8 @@ function ShadowDomModuleModePlugin({ uno }) {
         let element;
         const partsToApply = /* @__PURE__ */ new Map();
         const { idxResolver, incrementIdx } = idxMapFactory();
-        while (element = nameRegexp.exec(useCode)) {
-          const result = checkElement(
-            useParts,
-            idxResolver,
-            element
-          );
+        while ((element = nameRegexp.exec(useCode))) {
+          const result = checkElement(useParts, idxResolver, element);
           if (result) {
             result.entries.forEach(([name, replacement]) => {
               let list = partsToApply.get(name);
@@ -1001,9 +1084,18 @@ function ShadowDomModuleModePlugin({ uno }) {
         }
       }
     }
-    if (id.includes("?vue&type=style") || id.endsWith(".vue") && vueSFCStyleRE.test(code))
-      return code.replace(new RegExp(`(\\/\\*\\s*)?${CSS_PLACEHOLDER}(\\s*\\*\\/)?`), css || "");
-    return code.replace(CSS_PLACEHOLDER, css?.replace(/\\/g, "\\\\")?.replace(/`/g, "\\`") ?? "");
+    if (
+      id.includes("?vue&type=style") ||
+      (id.endsWith(".vue") && vueSFCStyleRE.test(code))
+    )
+      return code.replace(
+        new RegExp(`(\\/\\*\\s*)?${CSS_PLACEHOLDER}(\\s*\\*\\/)?`),
+        css || "",
+      );
+    return code.replace(
+      CSS_PLACEHOLDER,
+      css?.replace(/\\/g, "\\\\")?.replace(/`/g, "\\`") ?? "",
+    );
   };
   return {
     name: "unocss:shadow-dom",
@@ -1017,7 +1109,7 @@ function ShadowDomModuleModePlugin({ uno }) {
         const code = await read();
         return await transformWebComponent(code, ctx.file);
       };
-    }
+    },
   };
 }
 
@@ -1031,19 +1123,17 @@ function ConfigHMRPlugin(ctx) {
     async configureServer(server) {
       uno.config.envMode = "dev";
       const { sources } = await ready;
-      if (!sources.length)
-        return;
+      if (!sources.length) return;
       server.watcher.add(sources);
       server.watcher.on("change", async (p) => {
-        if (!sources.includes(p))
-          return;
+        if (!sources.includes(p)) return;
         await ctx.reloadConfig();
         server.ws.send({
           type: "custom",
-          event: "unocss:config-changed"
+          event: "unocss:config-changed",
         });
       });
-    }
+    },
   };
 }
 
@@ -1052,7 +1142,9 @@ function createTransformerPlugins(ctx) {
   return orders.map((_order) => {
     const order = _order === "default" ? void 0 : _order;
     const htmlHandler = (code) => {
-      return applyTransformers(ctx, code, "index.html", order).then((t) => t?.code);
+      return applyTransformers(ctx, code, "index.html", order).then(
+        (t) => t?.code,
+      );
     };
     return {
       name: `unocss:transformers:${order}`,
@@ -1065,13 +1157,16 @@ function createTransformerPlugins(ctx) {
         handler: htmlHandler,
         // Compatibility with Legacy Vite
         enforce: order,
-        transform: htmlHandler
-      }
+        transform: htmlHandler,
+      },
     };
   });
 }
 
-const _dirname = typeof __dirname !== "undefined" ? __dirname : dirname(fileURLToPath(import.meta.url));
+const _dirname =
+  typeof __dirname !== "undefined"
+    ? __dirname
+    : dirname(fileURLToPath(import.meta.url));
 const DEVTOOLS_MODULE_ID = "virtual:unocss-devtools";
 const MOCK_CLASSES_MODULE_ID = "virtual:unocss-mock-classes";
 const MOCK_CLASSES_PATH = "/@unocss/mock-classes";
@@ -1080,13 +1175,13 @@ const DEVTOOLS_CSS_PATH = "/@unocss/devtools.css";
 const devtoolCss = /* @__PURE__ */ new Set();
 const MODULES_MAP = {
   [DEVTOOLS_MODULE_ID]: DEVTOOLS_PATH,
-  [MOCK_CLASSES_MODULE_ID]: MOCK_CLASSES_PATH
+  [MOCK_CLASSES_MODULE_ID]: MOCK_CLASSES_PATH,
 };
 const BASE_POST_PATH = "/@unocss-devtools-update";
 function getBodyJson(req) {
   return new Promise((resolve2, reject) => {
     let body = "";
-    req.on("data", (chunk) => body += chunk);
+    req.on("data", (chunk) => (body += chunk));
     req.on("error", reject);
     req.on("end", () => {
       try {
@@ -1111,26 +1206,27 @@ function createDevtoolsPlugin(ctx, pluginConfig) {
     clearTimeout(devtoolTimer);
     devtoolTimer = setTimeout(() => {
       lastUpdate = Date.now();
-      if (!server)
-        return;
+      if (!server) return;
       const mod = server.moduleGraph.getModuleById(DEVTOOLS_CSS_PATH);
-      if (!mod)
-        return;
+      if (!mod) return;
       server.moduleGraph.invalidateModule(mod);
       server.ws.send({
         type: "update",
-        updates: [{
-          acceptedPath: DEVTOOLS_CSS_PATH,
-          path: DEVTOOLS_CSS_PATH,
-          timestamp: lastUpdate,
-          type: "js-update"
-        }]
+        updates: [
+          {
+            acceptedPath: DEVTOOLS_CSS_PATH,
+            path: DEVTOOLS_CSS_PATH,
+            timestamp: lastUpdate,
+            type: "js-update",
+          },
+        ],
       });
     }, 100);
   }
   async function getMockClassesInjector() {
     const suggest = Object.keys(ctx.uno.config.rulesStaticMap);
-    const comment = "/* unocss CSS mock class names for devtools auto-completion */\n";
+    const comment =
+      "/* unocss CSS mock class names for devtools auto-completion */\n";
     const css = suggest.map(toClass).join("");
     return `
   const style = document.createElement('style')
@@ -1149,8 +1245,7 @@ function createDevtoolsPlugin(ctx, pluginConfig) {
       configureServer(_server) {
         server = _server;
         server.middlewares.use(async (req, res, next) => {
-          if (req.url !== postPath)
-            return next();
+          if (req.url !== postPath) return next();
           try {
             const data = await getBodyJson(req);
             const type = data?.type;
@@ -1163,8 +1258,7 @@ function createDevtoolsPlugin(ctx, pluginConfig) {
                     changed = true;
                   }
                 });
-                if (changed)
-                  updateDevtoolClass();
+                if (changed) updateDevtoolClass();
             }
             res.statusCode = 200;
           } catch (e) {
@@ -1175,18 +1269,26 @@ function createDevtoolsPlugin(ctx, pluginConfig) {
         });
       },
       resolveId(id) {
-        if (id === DEVTOOLS_CSS_PATH)
-          return DEVTOOLS_CSS_PATH;
+        if (id === DEVTOOLS_CSS_PATH) return DEVTOOLS_CSS_PATH;
         return MODULES_MAP[id];
       },
       async load(id) {
         if (id === DEVTOOLS_PATH) {
           if (!clientCode) {
             clientCode = [
-              await fs$1.promises.readFile(resolve(_dirname, "client.mjs"), "utf-8"),
+              await fs$1.promises.readFile(
+                resolve(_dirname, "client.mjs"),
+                "utf-8",
+              ),
               `import('${MOCK_CLASSES_MODULE_ID}')`,
-              `import('${DEVTOOLS_CSS_PATH}')`
-            ].join("\n").replace("__POST_PATH__", `${config.server?.origin ?? ""}${postPath}`).replace("__POST_FETCH_MODE__", pluginConfig.fetchMode ?? "cors");
+              `import('${DEVTOOLS_CSS_PATH}')`,
+            ]
+              .join("\n")
+              .replace(
+                "__POST_PATH__",
+                `${config.server?.origin ?? ""}${postPath}`,
+              )
+              .replace("__POST_FETCH_MODE__", pluginConfig.fetchMode ?? "cors");
           }
           return config.command === "build" ? "" : clientCode;
         } else if (id === MOCK_CLASSES_PATH) {
@@ -1195,8 +1297,8 @@ function createDevtoolsPlugin(ctx, pluginConfig) {
           const { css } = await ctx.uno.generate(devtoolCss);
           return css;
         }
-      }
-    }
+      },
+    },
   ];
 }
 
@@ -1206,9 +1308,10 @@ function defineConfig(config) {
 function UnocssPlugin(configOrPath, defaults = {}) {
   const ctx = createContext(configOrPath, {
     envMode: process$1.env.NODE_ENV === "development" ? "dev" : "build",
-    ...defaults
+    ...defaults,
   });
-  const inlineConfig = configOrPath && typeof configOrPath !== "string" ? configOrPath : {};
+  const inlineConfig =
+    configOrPath && typeof configOrPath !== "string" ? configOrPath : {};
   const mode = inlineConfig.mode ?? "global";
   const plugins = [
     ConfigHMRPlugin(ctx),
@@ -1218,31 +1321,38 @@ function UnocssPlugin(configOrPath, defaults = {}) {
       name: "unocss:api",
       api: {
         getContext: () => ctx,
-        getMode: () => mode
-      }
-    }
+        getMode: () => mode,
+      },
+    },
   ];
-  if (inlineConfig.inspector !== false)
-    plugins.push(UnocssInspector(ctx));
+  if (inlineConfig.inspector !== false) plugins.push(UnocssInspector(ctx));
   if (mode === "per-module") {
     plugins.push(...PerModuleModePlugin(ctx));
   } else if (mode === "vue-scoped") {
     plugins.push(VueScopedPlugin(ctx));
   } else if (mode === "svelte-scoped") {
-    throw new Error("[unocss] svelte-scoped mode is now its own package, please use @unocss/svelte-scoped according to the docs");
+    throw new Error(
+      "[unocss] svelte-scoped mode is now its own package, please use @unocss/svelte-scoped according to the docs",
+    );
   } else if (mode === "shadow-dom") {
     plugins.push(ShadowDomModuleModePlugin(ctx));
   } else if (mode === "global") {
     plugins.push(...GlobalModePlugin(ctx));
   } else if (mode === "dist-chunk") {
-    plugins.push(
-      ChunkModeBuildPlugin(ctx),
-      ...GlobalModeDevPlugin(ctx)
-    );
+    plugins.push(ChunkModeBuildPlugin(ctx), ...GlobalModeDevPlugin(ctx));
   } else {
     throw new Error(`[unocss] unknown mode "${mode}"`);
   }
   return plugins.filter(Boolean);
 }
 
-export { ChunkModeBuildPlugin, GlobalModeBuildPlugin, GlobalModeDevPlugin, GlobalModePlugin, PerModuleModePlugin, VueScopedPlugin, UnocssPlugin as default, defineConfig };
+export {
+  ChunkModeBuildPlugin,
+  GlobalModeBuildPlugin,
+  GlobalModeDevPlugin,
+  GlobalModePlugin,
+  PerModuleModePlugin,
+  VueScopedPlugin,
+  UnocssPlugin as default,
+  defineConfig,
+};
